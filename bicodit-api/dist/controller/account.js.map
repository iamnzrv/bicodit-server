{"version":3,"sources":["../../src/controller/account.js"],"names":["config","db","api","get","req","res","console","log","post","next","UserDataExt","findUserByEmail","body","email","err","userData","status","json","message","findUserByLogin","login","user","Account","register","username","password","account","passport","authenticate","session","newUser","User","_id","name","about","save","generateAccessToken","respond","scope","failWithError","logout","send"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport e, { Router } from 'express';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport config from '../config';\nimport Account from '../models/account';\nimport User from '../models/user';\nimport UserDataExt from './extensions/user_data_ext';\n\nimport { generateAccessToken, respond, authenticate } from '../middleware/auth_middleware';\n\nexport default ({ config, db }) => {\n  let api = Router();\n\n  api.get('/kek', (req, res) => {\n    console.log(\"LOL\")\n  })\n\n  // '/bicoditapi/account/register'\n  api.post('/register', (req, res, next) => {\n    UserDataExt.findUserByEmail(req.body.email, (err, userData) => {\n      if (err) {\n        res.status(409).json({ message: `An error occured: ${err.message}`});\n      } else if (userData) {\n        res.status(300).json({ message: `Email ${req.body.email} is already registered`});\n      } else {\n        UserDataExt.findUserByLogin(req.body.login, (err, user) => {\n          if (err) {\n            res.status(409).json({ message: `An error occured: ${err.message}`});\n          } else if (user) {\n            res.status(300).json({ message: `Login ${req.body.login} is already registered`});\n          } else {\n            Account.register(new Account({ username: req.body.login, email: req.body.email }), req.body.password, function(err, account) {\n              if (err) {\n                res.status(500).json({ message: err });\n              }\n              passport.authenticate('local', { session: false })(req, res, () => {\n                const newUser = new User({ account: req.user._id, name: \"\", about: \"\" })\n                newUser.save(err => {\n                  if (err) {\n                    res.status(500).json({ message: err });\n                  }\n                  else {\n                    next()\n                  }\n                })\n              });\n            });\n          }\n        })\n      }\n    });\n  }, generateAccessToken, respond);\n\n  // '/bicoditapi/account/login'\n  api.post('/login', (req, res, next) => {\n\t\tUserDataExt.findUserByEmail(req.body.email, (err, user) => {\n      if (err) {\n        res.status(409).json({ message: `An error occured: ${err.message}`});\n      } else {\n        req.body.login = user.username\n        next()\n\t\t\t}\n    });\n  }, passport.authenticate('local', { session: false, scope: [], failWithError: true }), (err, req, res, next) => {\n    if (err) {\n      res.status(401).json({ message: `Email or password invalid, please check your credentials`});\n    }\n  }, generateAccessToken, respond);\n\n  // '/bicoditapi/account/logout'\n  api.get('/logout', authenticate, (req, res) => {\n    res.logout();\n    res.status(200).send('Successfully logged out');\n  });\n\n  api.get('/me', authenticate, (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  return api;\n}\n"],"file":"account.js"}